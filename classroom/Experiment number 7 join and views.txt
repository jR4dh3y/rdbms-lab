Aim:-To perform queries from multiple tables using join and views
A view is a virtual table based on the result of a SQL query.
It doesn't store data itself, but shows data from one or more tables.Think of it like a saved query that you can use like a regular table.
Why Use Views?
Simplify complex queries
Improve readability and reusability
Enhance security (limit column access)
Make reports easier to generate

Syntax: CREATE VIEW view_name AS
	SELECT columns
	FROM table
	WHERE condition

Example :create view courseenroll as
	 select c.courseid,c.coursename,e.enrollmentid
	 from enrollments e join courses c
 	 on(e.courseid=c.courseid);

	select * from enrollments;
Paste output:


What are JOINS in MySQL?
JOINS are used to combine rows from two or more tables based on a related column between them (usually a foreign key).


Join Type	Description
EQUI JOIN	Returns only matching rows from both tables
LEFT JOIN	Returns all rows from the left table, and matching rows from the right
RIGHT JOIN	Returns all rows from the right table, and matching rows from the left
FULL OUTER*	Returns all rows from both tables (MySQL doesnâ€™t support it directly)
CROSS JOIN	Returns all possible combinations of rows (Cartesian product)

Syntax:
SELECT columns
FROM table1
JOIN_TYPE table2
ON table1.column = table2.column;




#Equi join
Q Display each course name with the name of the department it belongs to.

select coursename,deptname
from courses join departments
on courses.deptid=departments.deptid;
Paste output:


#nonequi join
Q Display each instructor's salary along with their grade.

select name,salary,grade
from instructors join salgrade
on( salary between minsal and maxsal);
Paste output:


#self join
Q Show instructor names with their manager name.

select t1.name as employee,t2.name as mgr
from instructors t1 join instructors t2
on(t1.mid=t2.instructorid);
Paste output:

#natural join
Q Show the name of the student along with coursed and grade in that course

select s.studentid,s.name,e.courseId,e.grade
from students s natural join enrollments e;
Paste output:


#left outer join
Q Display all student names, even if they haven't enrolled in any course.
select s.studentid,s.name,e.courseId,e.grade
from students s left outer join enrollments e
on(s.studentid=e.studentid);
Paste output:


#right outer join
Q Show all course names, whether or not any student is enrolled in them.

select c.courseid,c.coursename,e.enrolldate
from enrollments e right outer join courses c
on(e.courseid=c.courseid);
Paste output:


# full outer join
select c.courseid,c.coursename,e.enrolldate,enrollmentid
from enrollments e left outer join courses c
on(e.courseid=c.courseid)
union
select c.courseid,c.coursename,e.enrolldate,enrollmentid
from enrollments e right outer join courses c
on(e.courseid=c.courseid)
order by enrolldate;
Paste output:

#cartesian product or cross join
Q Show all possible combination among the tuples between the tables

select * 
from instructors cross join departments;
Paste output:




